import json
import asyncio
import logging
from aiohttp import ClientSession
from bot.questions import questions
from bot.utils import convert_to_12_hour, format_answers_for_api, validate_sleep_data, generate_advice
from bot.session import user_data, user_results
from config.token import API_TOKEN, FASTAPI_URL
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram import Bot

router = Router()


@router.message(Command("start"))
async def start(message: types.Message):
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø **SleepAdvisorBot**, –ø–æ–º–æ–≥—É –æ—Ü–µ–Ω–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ —Ç–≤–æ–µ–≥–æ —Å–Ω–∞.\n\n"
        "üß† /check ‚Äî –ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å –∏ —É–∑–Ω–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞\n"
        "üí° /help ‚Äî —Å–æ–≤–µ—Ç—ã –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Å–Ω–∞\n\n"
        "–í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!"
    )
    await message.answer(text, parse_mode="Markdown")


@router.message(Command("help"))
async def help_command(message: types.Message):
    user_id = message.from_user.id
    result = user_results.get(user_id)

    if not result:
        text = (
            f"üß† –¢—ã –µ—â—ë –Ω–µ –ø—Ä–æ—à—ë–ª –∞–Ω–∞–ª–∏–∑ —Å–Ω–∞!\n\n"
            "üí° –ù–æ –≤—Å—ë —Ä–∞–≤–Ω–æ –¥–µ—Ä–∂–∏ –±–∞–∑–æ–≤—ã–µ —Å–æ–≤–µ—Ç—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å–Ω–∞:\n"
            "- –õ–æ–∂–∏—Å—å –∏ –≤—Å—Ç–∞–≤–∞–π –≤ –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ –≤—Ä–µ–º—è.\n"
            "- –ò–∑–±–µ–≥–∞–π –∫–æ—Ñ–µ–∏–Ω–∞ –∏ –∞–ª–∫–æ–≥–æ–ª—è –ø–µ—Ä–µ–¥ —Å–Ω–æ–º.\n"
            "- –ù–µ —Å–º–æ—Ç—Ä–∏ –≤ —ç–∫—Ä–∞–Ω –∑–∞ —á–∞—Å –¥–æ —Å–Ω–∞.\n"
            "- –ü—Ä–æ–≤–µ—Ç—Ä–∏–≤–∞–π –∫–æ–º–Ω–∞—Ç—É –∏ –¥–µ—Ä–∂–∏ –ø—Ä–æ—Ö–ª–∞–¥—É.\n"
            "- –î–µ–ª–∞–π –ª—ë–≥–∫—É—é —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–Ω—ë–º.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π /check, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞!"
        )
    else:
        text = (
            f"üß† –¢—ã —É–∂–µ –ø—Ä–æ—à—ë–ª –∞–Ω–∞–ª–∏–∑ —Å–Ω–∞!\n\n"
            f"–£ —Ç–µ–±—è {result['label']}\n\n"
            f"{result['advice']}"
        )

    await message.answer(text, parse_mode="HTML")



@router.message(Command("check"))
async def check_start(message: types.Message):
    user_id = message.from_user.id
    user_data[user_id] = {"step": 0, "answers": {}, "message": None}

    sent = await message.answer("üßæ –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–æ—Å...")
    user_data[user_id]["message"] = sent
    await asyncio.sleep(1)
    await ask_question(user_id, message.bot)


async def ask_question(user_id: int, bot: Bot):
    try:
        step = user_data[user_id]["step"]
        msg = user_data[user_id]["message"]
    except KeyError:
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ user_data")
        await bot.send_message(user_id, "‚ö†Ô∏è –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π /check –∑–∞–Ω–æ–≤–æ.")
        return

    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ API
    if step >= len(questions):
        await bot.send_message(user_id, "üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–≤–æ–π —Å–æ–Ω...")
        await asyncio.sleep(1)
        answers = user_data[user_id]["answers"]
        payload = format_answers_for_api(answers)

        if not validate_sleep_data(payload):
            await bot.send_message(user_id, "‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π /check –∑–∞–Ω–æ–≤–æ.")
            user_data.pop(user_id, None)
            return

        try:
            async with ClientSession() as session:
                async with session.post(FASTAPI_URL, json=payload, timeout=10) as resp:
                    if resp.status == 200:
                        try:
                            result = await resp.json()
                            label = result.get("sleep_efficiency_label", -1)
                            label_map = {
                                0: "‚ùå –ü–ª–æ—Ö–æ–π —Å–æ–Ω",
                                1: "‚úÖ –•–æ—Ä–æ—à–∏–π —Å–æ–Ω",
                                2: "üòê –°—Ä–µ–¥–Ω–∏–π —Å–æ–Ω"
                            }
                            label_text = label_map.get(label, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ —Å–æ–≤–µ—Ç—ã
                            user_data[user_id]["last_label"] = label_text
                            user_data[user_id]["last_advice"] = generate_advice(user_data[user_id]["answers"], label)

                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                            await bot.send_message(
                                user_id,
                                f"üß† –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏: <b>{label_text}</b>\n\n{user_data[user_id]['last_advice']}",
                                parse_mode="HTML"
                            )
                        except json.JSONDecodeError:
                            logging.exception("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON-–æ—Ç–≤–µ—Ç–∞ API")
                            await bot.send_message(user_id, "‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç.")
                    else:
                        await bot.send_message(user_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç API: {resp.status}")
        except asyncio.TimeoutError:
            await bot.send_message(user_id, "‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.")
        except Exception:
            logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API")
            await bot.send_message(user_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

        user_results[user_id] = {
            "label": label_text,
            "advice": generate_advice(user_data[user_id]["answers"], label)
        }
        user_data.pop(user_id, None)
        return

    # –ó–∞–¥–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
    try:
        key, text, qtype = questions[step]
        markup = None

        if key == "Gender":
            age = user_data[user_id]["answers"].get("Age", 20)
            options = [("–î–µ–≤—É—à–∫–∞", 0), ("–Æ–Ω–æ—à–∞", 1)] if age <= 18 else [("–ñ–µ–Ω—â–∏–Ω–∞", 0), ("–ú—É–∂—á–∏–Ω–∞", 1)]
            markup = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text=n, callback_data=f"{key}:{v}")] for n, v in options
            ])
        elif key == "Smoking_status":
            markup = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="üö≠ –ù–µ—Ç", callback_data=f"{key}:0"),
                 types.InlineKeyboardButton(text="üö¨ –î–∞", callback_data=f"{key}:1")]
            ])

        if qtype == "choice" and markup is None:
            logging.warning(f"–ù–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ {key}")
            await bot.send_message(user_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞.")
            return

        sent = await bot.send_message(user_id, text, reply_markup=markup)
        user_data[user_id]["message"] = sent
    except Exception:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞")
        await bot.send_message(user_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π /check –∑–∞–Ω–æ–≤–æ.")
        user_data.pop(user_id, None)


@router.message(F.text)
async def handle_text(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_data:
        return

    step = user_data[user_id]["step"]
    key, _, qtype = questions[step]

    if qtype != "input":
        return

    raw = message.text.strip()

    # ‚è≥ –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
    await asyncio.sleep(0.5)

    # üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥
    try:
        if key in ["bed_hour", "wake_hour"]:
            val = convert_to_12_hour(raw)
        else:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–∏—Å—Ç–æ–µ —á–∏—Å–ª–æ
            if not raw.replace(".", "", 1).isdigit():
                raise ValueError("–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –≤–≤–æ–¥")
            val = float(raw)
    except ValueError:
        await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    # üîß –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    if key == 'Exercise_frequency':
        if val < 0:
            await message.answer("–ü–æ–Ω—è–ª, –∑–Ω–∞—á–∏—Ç –Ω–µ –∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å)")
            val = 0
        elif val > 7:
            await message.answer("–í –Ω–µ–¥–µ–ª–µ —Ç–æ–ª—å–∫–æ 7 –¥–Ω–µ–π! üòÖ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.")
            return

    if key == "Caffeine_consumption":
        if val < 0:
            await message.answer("–ü–æ–Ω—è–ª, –∑–Ω–∞—á–∏—Ç –Ω–µ –ø—å—ë—Ç–µ)")
            val = 0
        val = min(val * 25, 125)

    if key == 'Alcohol_consumption':
        if val < 0:
            await message.answer("–ü–æ–Ω—è–ª, –∑–Ω–∞—á–∏—Ç –Ω–µ –ø—å—ë—Ç–µ)")
            val = 0
        elif val > 10:
            await message.answer("–ú–¥–∞...")

    if key == 'Awakenings':
        if val > 10:
            await message.answer("–≠–º–º, –≤—ã –≤–æ–æ–±—â–µ —Å–ø–∞–ª–∏? –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑:")
            return

    if key == "Sleep_duration":
        if val > 24:
            await message.answer("–í —Å—É—Ç–∫–∞—Ö —Ç–æ–ª—å–∫–æ 24 —á–∞—Å–∞! üòÖ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–Ω–∞.")
            return

    if key == "Age":
        if "age_attempts" not in user_data[user_id]:
            user_data[user_id]["age_attempts"] = 0

        if val < 0:
            user_data[user_id]["age_attempts"] += 1
            if user_data[user_id]["age_attempts"] == 1:
                await message.answer("–í–æ–∑—Ä–∞—Å—Ç –Ω–µ –±—ã–≤–∞–µ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —Ç–∞–∫-—Ç–æ...\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
                return
            elif user_data[user_id]["age_attempts"] == 2:
                await message.answer("–≠–º–º...\n–í—ã —Å—Ç—Ä–∞–Ω–Ω—ã–π üòÖ –ú–æ–∂–µ—Ç –µ—â—ë —Ä–∞–∑)?")
                return
            elif user_data[user_id]["age_attempts"] >= 3:
                await message.answer("–¢–∞–∫ —É–∂ –∏ –±—ã—Ç—å... –û–∫–µ–π, –∑–∞–ø–∏—Å—ã–≤–∞—é...")
                val = 20

        elif 100 <= val <= 120:
            await message.answer("–í–æ—Ç —ç—Ç–æ –≤—ã –¥–æ–ª–≥–æ–∂–∏—Ç–µ–ª—å! üéâ")

        elif val > 120:
            user_data[user_id]["pending_age"] = val
            markup = types.InlineKeyboardMarkup(inline_keyboard=[
                [
                    types.InlineKeyboardButton(text="–î–∞", callback_data="AgeConfirm:yes"),
                    types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data="AgeConfirm:no")
                ]
            ])
            await message.answer(
                "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç —á–µ–ª–æ–≤–µ–∫–∞ ‚Äî 122 –≥–æ–¥–∞ –∏ 164 –¥–Ω—è.\n"
                "–≠—Ç–æ—Ç —Ä–µ–∫–æ—Ä–¥ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ñ—Ä–∞–Ω—Ü—É–∂–µ–Ω–∫–µ –ñ–∞–Ω–Ω–µ –ö–∞–ª—å–º–∞–Ω.\n"
                "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –≤–∞–º –±–æ–ª—å—à–µ –Ω–µ—ë?",
                reply_markup=markup
            )
            return

    # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    user_data[user_id]["answers"][key] = val
    user_data[user_id]["step"] += 1

    await ask_question(user_id, message.bot)


@router.callback_query(F.data)
async def handle_callback(call: types.CallbackQuery):
    user_id = call.from_user.id
    if user_id not in user_data:
        await call.answer()
        return

    try:
        # üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞
        if call.data.startswith("AgeConfirm"):
            choice = call.data.split(":")[1]
            if "pending_age" not in user_data[user_id]:
                await call.answer("–°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π /check –∑–∞–Ω–æ–≤–æ.")
                return

            await call.message.delete()

            if choice == "yes":
                val = user_data[user_id]["pending_age"]
                await call.message.answer(f"–•–æ—Ä–æ—à–æ, –∑–∞–ø–∏—Å—ã–≤–∞—é –≤–æ–∑—Ä–∞—Å—Ç –∫–∞–∫ {val}")
                user_data[user_id]["answers"]["Age"] = val
                user_data[user_id]["step"] += 1
                user_data[user_id].pop("pending_age", None)
                await ask_question(user_id, call.bot)

            elif choice == "no":
                await call.message.answer("–•–æ—Ä–æ—à–æ, —Ç–æ–≥–¥–∞ –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –≤–æ–∑—Ä–∞—Å—Ç:")
                user_data[user_id].pop("pending_age", None)

            await call.answer()
            return  # ‚õîÔ∏è –ù–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–ª—å—à–µ

        # üîÅ –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
        key, value = call.data.split(":")

        await call.message.delete()

        user_data[user_id]["answers"][key] = int(value)
        user_data[user_id]["step"] += 1
        await call.answer()
        await ask_question(user_id, call.bot)

    except Exception:
        logging.exception("–û—à–∏–±–∫–∞ –≤ callback")
        await call.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞.")
        await call.bot.send_message(user_id, "‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π /check –∑–∞–Ω–æ–≤–æ.")
        user_data.pop(user_id, None)
