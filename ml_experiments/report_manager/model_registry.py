import mlflow
import mlflow.sklearn
from mlflow.tracking import MlflowClient
from collections import defaultdict

# === –§–£–ù–ö–¶–ò–ò –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –í–ï–†–°–ò–Ø–ú–ò –ú–û–î–ï–õ–ï–ô ===


def load_model_version(model_name, version=None, stage=None):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é –º–æ–¥–µ–ª–∏ –∏–∑ Model Registry

    Args:
        model_name: –ò–º—è –º–æ–¥–µ–ª–∏ –≤ —Ä–µ–µ—Å—Ç—Ä–µ
        version: –ù–æ–º–µ—Ä –≤–µ—Ä—Å–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "1", "2")
        stage: –°—Ç–∞–¥–∏—è –º–æ–¥–µ–ª–∏ ("Staging", "Production", "Archived")
    """
    try:
        if version:
            model_uri = f"models:/{model_name}/{version}"
            print(f"–ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å {model_name} –≤–µ—Ä—Å–∏–∏ {version}")
        elif stage:
            model_uri = f"models:/{model_name}/{stage}"
            print(f"–ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å {model_name} —Å–æ —Å—Ç–∞–¥–∏–∏ {stage}")
        else:
            model_uri = f"models:/{model_name}/latest"
            print(f"–ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é –º–æ–¥–µ–ª–∏ {model_name}")

        model = mlflow.sklearn.load_model(model_uri)
        print(f"‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {model_uri}")
        return model

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏: {e}")
        return None


def list_model_versions(model_name, sort_by="f1_score_test", descending=True):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –≤–µ—Ä—Å–∏–∏ –º–æ–¥–µ–ª–∏, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –ø–æ–ª—é."""
    try:
        client = mlflow.tracking.MlflowClient()
        versions = client.search_model_versions(f"name='{model_name}'")

        rows = []
        for v in versions:
            tags = v.tags
            row = {
                "version": int(v.version),  # <-- —ç—Ç–æ –Ω–∞—Å—Ç–æ—è—â–∏–π –Ω–æ–º–µ—Ä –≤–µ—Ä—Å–∏–∏
                "stage": v.current_stage,
                "created": v.creation_timestamp,
                "run_id": v.run_id,
                "tags": tags,
                "f1_score_test": float(tags.get("f1_score_test", -1)),
                "roc_auc_test": float(tags.get("roc_auc_test", -1))
            }
            rows.append(row)

        # –í—ã–±–æ—Ä –ø–æ–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        if sort_by == "version":
            rows_sorted = sorted(rows, key=lambda x: x["version"], reverse=descending)
        elif sort_by == "created":
            rows_sorted = sorted(rows, key=lambda x: x["created"], reverse=descending)
        elif sort_by in ["f1_score_test", "roc_auc_test"]:
            rows_sorted = sorted(rows, key=lambda x: x.get(sort_by, -1), reverse=descending)
        else:
            print(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏: '{sort_by}', —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
            rows_sorted = rows

        print(f"\nüìã –í–µ—Ä—Å–∏–∏ –º–æ–¥–µ–ª–∏ '{model_name}' (—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ '{sort_by}'):")
        print("-" * 80)
        for row in rows_sorted:
            print(f"–í–µ—Ä—Å–∏—è: {row['version']}")
            print(f"–°—Ç–∞–¥–∏—è: {row['stage']}")
            print(f"–°–æ–∑–¥–∞–Ω–∞: {row['created']}")
            print(f"Run ID: {row['run_id']}")
            print(f"f1_score_test: {row['f1_score_test']}")
            print(f"roc_auc_test: {row['roc_auc_test']}")
            print(f"–¢–µ–≥–∏: {row['tags']}")
            print("-" * 40)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–µ—Ä—Å–∏–π: {e}")


def tag_register_model(model_name, version, key="None", value="None"):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ–≥ –∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ (–Ω–µ –∫ –≤–µ—Ä—Å–∏–∏).

    Args:
        model_name (str): –ò–º—è –º–æ–¥–µ–ª–∏ –≤ —Ä–µ–µ—Å—Ç—Ä–µ
        version (str or int): –ù–æ–º–µ—Ä –≤–µ—Ä—Å–∏–∏ –º–æ–¥–µ–ª–∏
        key (str): –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–≥–∞
        value (str): –ó–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–≥–∞
    """
    try:
        client = MlflowClient()
        version_str = str(version)
        # –¢–µ–≥ –∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
        client.set_registered_model_tag(
            name=model_name,
            key=key,
            value=value
        )
        # –¢–µ–≥ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –º–æ–¥–µ–ª–∏
        client.set_model_version_tag(
            name=model_name,
            version=version_str,
            key=key,
            value=value
        )
        print(f"üè∑Ô∏è –¢–µ–≥ '{key}={value}' –¥–æ–±–∞–≤–ª–µ–Ω –∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ '{model_name}'")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ–≥–∞ –∫ –º–æ–¥–µ–ª–∏: {e}")


def compare_multiple_models(model_versions, metrics_to_compare=None):
    """
    –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –º–µ—Ç—Ä–∏–∫–∞–º.

    Args:
        model_versions (list of tuples): –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –∏ –≤–µ—Ä—Å–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ [(model_name, version), ...]
        metrics_to_compare (list, optional): –ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è. –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –Ω–∞–±–æ—Ä.
    """
    try:
        client = MlflowClient()

        # –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if metrics_to_compare is None:
            metrics_to_compare = [
                'f1_score_test',
                'roc_auc_test',
                'accuracy_test',
                'precision_test',
                'recall_test'
            ]

        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
        results = []
        for model_name, version in model_versions:
            version_str = str(version)
            mv = client.get_model_version(model_name, version_str)
            run = client.get_run(mv.run_id)

            metrics = {}
            for metric in metrics_to_compare:
                value = run.data.metrics.get(metric)
                metrics[metric] = value if value is not None else "‚ùå"

            results.append({
                "model": model_name,
                "version": version_str,
                "metrics": metrics
            })

        # –í—ã–≤–æ–¥–∏–º —Ç–∞–±–ª–∏—Ü—É —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        print("\nüìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π:")
        print("=" * 80)
        header = f"{'Model':30} | " + " | ".join([f"{m:>12}" for m in metrics_to_compare])
        print(header)
        print("-" * len(header))

        for entry in results:
            row = f"{entry['model']} (v{entry['version']})".ljust(30) + " | "
            row += " | ".join([
                f"{entry['metrics'][m]:>12.4f}" if isinstance(entry['metrics'][m], float) else f"{entry['metrics'][m]:>12}"
                for m in metrics_to_compare
            ])
            print(row)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –º–æ–¥–µ–ª–µ–π: {e}")


def list_models_by_model_stage_tag(filter_stage=None):
    """
    –í—ã–≤–æ–¥–∏—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∏ –∏—Ö –≤–µ—Ä—Å–∏–∏, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ —Ç–µ–≥—É 'model_stage',
    —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–º—É —á–µ—Ä–µ–∑ set_model_version_tag.

    Args:
        filter_stage (str, optional): –§–∏–ª—å—Ç—Ä –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é —Ç–µ–≥–∞ 'model_stage' (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'Production')
    """
    try:
        client = MlflowClient()
        all_models = client.search_registered_models()

        stage_groups = {}

        for model in all_models:
            model_name = model.name
            versions = client.search_model_versions(f"name='{model_name}'")

            for v in versions:
                tags = client.get_model_version(model_name, v.version).tags
                stage = tags.get("model_stage", "None")

                if filter_stage is None or stage == filter_stage:
                    stage_groups.setdefault(stage, []).append((model_name, f"v{v.version}"))

        if not stage_groups:
            print(f"\nüîç –ù–µ—Ç –≤–µ—Ä—Å–∏–π –º–æ–¥–µ–ª–µ–π —Å —Ç–µ–≥–æ–º 'model_stage={filter_stage}'")
            return

        print("\nüì¶ –í–µ—Ä—Å–∏–∏ –º–æ–¥–µ–ª–µ–π –ø–æ —Ç–µ–≥—É 'model_stage':")
        print("=" * 50)
        for stage in sorted(stage_groups.keys()):
            entries = stage_groups[stage]
            print(f"\nüîπ {stage} ({len(entries)}):")
            for name, version in entries:
                print(f"   - {name} ‚Üí {version}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–µ–π: {e}")


def delete_model_versions_by_stage(stage_filter="To_Delete", dry_run=True):
    """
    –£–¥–∞–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –≤–µ—Ä—Å–∏–∏ –º–æ–¥–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö —Ç–µ–≥ 'model_stage' —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç stage_filter.

    Args:
        stage_filter (str): –ó–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–≥–∞ 'model_stage', –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É—é—Ç—Å—è –≤–µ—Ä—Å–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.
        dry_run (bool): –ï—Å–ª–∏ True ‚Äî —Ç–æ–ª—å–∫–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫–∏–µ –≤–µ—Ä—Å–∏–∏ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã, –±–µ–∑ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è.
    """
    try:
        client = MlflowClient()
        all_models = client.search_registered_models()

        to_delete = []

        for model in all_models:
            model_name = model.name
            versions = client.search_model_versions(f"name='{model_name}'")

            for v in versions:
                tags = client.get_model_version(model_name, v.version).tags
                stage = tags.get("model_stage", "None")

                if stage == stage_filter:
                    to_delete.append((model_name, v.version))

        if not to_delete:
            print(f"\nüîç –ù–µ—Ç –≤–µ—Ä—Å–∏–π –º–æ–¥–µ–ª–µ–π —Å —Ç–µ–≥–æ–º 'model_stage={stage_filter}' –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return

        print(f"\nüßπ –í–µ—Ä—Å–∏–∏ –º–æ–¥–µ–ª–µ–π —Å —Ç–µ–≥–æ–º 'model_stage={stage_filter}':")
        for model_name, version in to_delete:
            print(f"   - {model_name} ‚Üí v{version}")
            if not dry_run:
                client.delete_model_version(name=model_name, version=str(version))
                print(f"     ‚úÖ –£–¥–∞–ª–µ–Ω–æ")

        if dry_run:
            print("\n‚ÑπÔ∏è dry_run=True ‚Üí –≤–µ—Ä—Å–∏–∏ –Ω–µ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã. –£—Å—Ç–∞–Ω–æ–≤–∏ dry_run=False –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–µ—Ä—Å–∏–π –º–æ–¥–µ–ª–µ–π: {e}")

